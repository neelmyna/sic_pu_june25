"B-Tree Deletion", 
"Write code to delete a key from a B-Tree.", 
"Hard", 
"Google, Codeforces"

----------------------------------

Problem Title: B-Tree Deletion

Problem Description:
Given a B-Tree of order t (minimum degree), implement a function to delete a given key from the B-Tree. The B-Tree should maintain all its properties after the deletion. You are required to handle all cases of deletion, including deleting from leaf and non-leaf nodes, and ensuring the tree remains balanced.

Input Format:
- The first line contains two integers n and t, where n is the number of keys initially in the B-Tree, and t is the minimum degree of the B-Tree.
- The second line contains n space-separated integers representing the keys in the B-Tree in level order.
- The third line contains an integer q, the number of keys to delete.
- The fourth line contains q space-separated integers, each representing a key to delete from the B-Tree.

Output Format:
- For each deletion, output the level order traversal of the B-Tree after the deletion as a single line of space-separated integers. If the tree becomes empty, output "Empty".

Constraints:
- 1 <= t <= 10
- 1 <= n <= 100
- 1 <= q <= 10
- All keys are unique and in the range 1 to 1000.

Sample Input:
7 2
10 20 5 6 12 30 7
3
6 13 7
6 13 7

Sample Output:
10 20 5 7 12 30
10 20 5 7 12 30
10 20 5 12 30

Explanation:
- After deleting 6, the tree is restructured but remains valid.
- Deleting 13 (not present) does not change the tree.
- After deleting 7, the tree is updated accordingly.

Difficulty:
Hard

Test Cases:
1.
Input:
5 2
8 9 10 11 15
2
10 8

Output:
8 9 11 15
9 11 15

2.
Input:
6 3
20 40 60 80 100 120
1
60

Output:
20 40 80 100 120

3.
Input:
4 2
1 2 3 4
1
2

Output:
1 3 4

4.
Input:
3 2
5 10 15
1
5

Output:
10 15

5.
Input:
2 2
100 200
2
100 200

Output:
200
Empty

----------------------------------

Looking at the Sample Input, here's the text tree representation:

Sample Input Analysis:
- n = 7, t = 2 (7 keys, minimum degree 2)
- Keys: 10 20 5 6 12 30 7
- Delete queries: 6, 13, 7

Initial B-Tree Structure (t=2):

```
        [10, 20]
       /    |    \
    [5, 6]  [12]  [30]
              |
             [7]
```

Step-by-Step Deletion Process:

#1. Delete 6:
- Before: `[5, 6]` leaf node
- After: `[5]` leaf node
- Result: Tree remains structurally same

```
        [10, 20]
       /    |    \
     [5]   [12]  [30]
             |
            [7]
```
Level Order: `10 20 5 7 12 30`

#2. Delete 13:
- Key 13 not found in the tree
- No change to structure
- Result: Tree remains the same

```
        [10, 20]
       /    |    \
     [5]   [12]  [30]
             |
            [7]
```
Level Order: `10 20 5 7 12 30`

#3. Delete 7:
- Before: `[7]` leaf node under `[12]`
- After: `[7]` node is removed, `[12]` becomes leaf
- Result: Tree height reduces

```
        [10, 20]
       /    |    \
     [5]   [12]  [30]
```
Level Order: `10 20 5 12 30`

Final Results:
1. After deleting 6: `10 20 5 7 12 30`
2. After deleting 13: `10 20 5 7 12 30` (no change)
3. After deleting 7: `10 20 5 12 30`

This matches the expected Sample Output perfectly!